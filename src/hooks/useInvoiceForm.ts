import { useState, useEffect } from 'react';
import { useMutation, useQuery } from '@apollo/client';
import { Notification } from '../components/feedback/Notification';
import { 
  CREATE_INVOICE_MUTATION, 
  UPDATE_INVOICE_MUTATION,
  GET_NEXT_INVOICE_NUMBER
} from '../graphql/invoices';
import { GET_INVOICES } from '../graphql/queries';
import { GET_CLIENTS, CREATE_CLIENT } from '../graphql/client';
import { GET_USER_INFO } from '../graphql/queries';
import { Item, CustomField, Client, CompanyInfo } from '../types';

export interface UseInvoiceFormProps {
  invoice?: any;
  onClose: () => void;
  onSubmit?: (data: any) => void;
  showNotifications?: boolean;
}

export const useInvoiceForm = ({ 
  invoice, 
  onClose, 
  onSubmit, 
  showNotifications = false
}: UseInvoiceFormProps) => {
  // √âtats du formulaire
  const [selectedClient, setSelectedClient] = useState<string>(() => {
    // Log pour d√©bogage de l'initialisation
    console.log('Initialisation de selectedClient dans useInvoiceForm:', {
      'invoice?.client?.id': invoice?.client?.id,
      'valeur initiale': invoice?.client?.id || ''
    });
    return invoice?.client?.id || '';
  });
  const [isNewClient, setIsNewClient] = useState(false);
  
  // Initialiser newClient avec des valeurs par d√©faut ou les valeurs de l'invoice si disponibles
  const defaultNewClient = {
    type: 'COMPANY', // Type par d√©faut: entreprise
    name: '',
    email: '',
    street: '',
    city: '',
    country: '',
    postalCode: '',
    // Champs sp√©cifiques aux entreprises
    siret: '',
    vatNumber: '',
    // Champs sp√©cifiques aux particuliers
    firstName: '',
    lastName: ''
  };
  
  const [newClient, setNewClient] = useState(defaultNewClient);
  
  // Fonction pour r√©initialiser le nouveau client
  const resetNewClient = () => {
    setNewClient(defaultNewClient);
  };
  
  // Fonction personnalis√©e pour g√©rer le changement de mode client
  const handleClientModeChange = (isNew: boolean) => {
    console.log('üîÑ handleClientModeChange appel√© avec:', { isNew, 'pr√©c√©dent': isNewClient });
    
    // Pr√©venir les appels inutiles si l'√©tat ne change pas
    if (isNew === isNewClient) {
      console.log('‚è≠Ô∏è Pas de changement d\'√©tat, ignor√©');
      return;
    }
    
    // Mettre √† jour l'√©tat
    setIsNewClient(isNew);
    
    // Si on passe √† nouveau client, r√©initialiser les donn√©es du nouveau client
    if (isNew) {
      console.log('üîÑ Passage √† "nouveau client", r√©initialisation des donn√©es');
      resetNewClient();
    } else {
      console.log('üîÑ Passage √† "client existant"');
    }
  };
  const [items, setItems] = useState<Item[]>(
    invoice?.items ? invoice.items.map((item: any) => ({
      ...item,
      quantity: parseFloat(item.quantity.toString()),
      unitPrice: parseFloat(item.unitPrice.toString()),
      vatRate: parseFloat(item.vatRate?.toString() || '20'),
      unit: item.unit || 'unit√©',
      discount: item.discount || 0,
      discountType: item.discountType || 'FIXED',
      details: item.details || ''
    })) : [{ description: '', quantity: 1, unitPrice: 0, vatRate: 20, unit: 'unit√©', discount: 0, discountType: 'FIXED' }]
  );
  // Ne pas d√©finir de statut par d√©faut, laisser le backend le g√©rer
  const [status, setStatus] = useState(invoice?.status || '');
  const [submitAsDraft, setSubmitAsDraft] = useState(false);
  
  // Nous n'utilisons plus cet effet car nous allons forcer le statut directement dans handleSubmit
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [headerNotes, setHeaderNotes] = useState(invoice?.headerNotes || '');
  const [footerNotes, setFooterNotes] = useState(invoice?.footerNotes || '');
  const [termsAndConditions, setTermsAndConditions] = useState(invoice?.termsAndConditions || '');
  const [termsAndConditionsLinkTitle, setTermsAndConditionsLinkTitle] = useState(invoice?.termsAndConditionsLinkTitle || '');
  const [termsAndConditionsLink, setTermsAndConditionsLink] = useState(invoice?.termsAndConditionsLink || '');
  const [discount, setDiscount] = useState<number>(invoice?.discount || 0);
  const [discountType, setDiscountType] = useState<'PERCENTAGE' | 'FIXED'>(invoice?.discountType || 'FIXED');
  const [customFields, setCustomFields] = useState<CustomField[]>(
    invoice?.customFields || []
  );
  const [isDeposit, setIsDeposit] = useState(invoice?.isDeposit || false);
  const [invoiceNumber, setInvoiceNumber] = useState<string>('');
  const [invoicePrefix, setInvoicePrefix] = useState<string>(invoice?.prefix || (() => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    return `F-${year}${month}-`;
  })());
  const [purchaseOrderNumber, setPurchaseOrderNumber] = useState<string>(invoice?.purchaseOrderNumber || '');

  // Helper function to safely format dates
  const formatDate = (dateString: string | undefined | null): string => {
    if (!dateString) return new Date().toISOString().split('T')[0];
    
    try {
      let date: Date;
      
      // Check if dateString is a timestamp (number)
      if (!isNaN(Number(dateString))) {
        // It's a timestamp, convert to number and create Date
        date = new Date(Number(dateString));
      } else {
        // Try to parse as regular date string
        date = new Date(dateString);
      }
      
      // Check if the date is valid
      if (isNaN(date.getTime())) {
        return new Date().toISOString().split('T')[0];
      }
      
      return date.toISOString().split('T')[0];
    } catch (error) {
      console.error("Error parsing date:", error);
      // If there's any error parsing the date, return today's date
      return new Date().toISOString().split('T')[0];
    }
  };

  const [issueDate, setIssueDate] = useState(formatDate(invoice?.issueDate));
  const [executionDate, setExecutionDate] = useState(formatDate(invoice?.executionDate));
  const [dueDate, setDueDate] = useState(formatDate(invoice?.dueDate));

  const defaultCompanyInfo: CompanyInfo = {
    name: '',
    email: '',
    phone: '',
    website: '',
    siret: '',
    vatNumber: '',
    logo: '',
    address: {
      street: '',
      city: '',
      postalCode: '',
      country: ''
    },
    bankDetails: undefined
  };

  const [companyInfo, setCompanyInfo] = useState<CompanyInfo>(() => {
    if (invoice?.companyInfo) {
      const { bankDetails, ...rest } = invoice.companyInfo;
      return {
        ...rest,
        bankDetails: bankDetails ? {
          iban: bankDetails.iban,
          bic: bankDetails.bic,
          bankName: bankDetails.bankName
        } : undefined
      };
    }
    return defaultCompanyInfo;
  });
  const [useBankDetails, setUseBankDetails] = useState(false);
  const [bankDetailsComplete, setBankDetailsComplete] = useState(false);
  const [bankDetailsReadOnly, setBankDetailsReadOnly] = useState(false);

  // Requ√™tes GraphQL
  // Utiliser une limite √©lev√©e pour r√©cup√©rer tous les clients d'un coup
  const { data: clientsData } = useQuery(GET_CLIENTS, {
    variables: {
      page: 1,
      limit: 1000, // Limite √©lev√©e pour r√©cup√©rer tous les clients
      search: ""
    }
  });
  const { data: userData } = useQuery(GET_USER_INFO);
  const { data: invoicesData, refetch: refetchInvoices } = useQuery(GET_INVOICES);
  const { data: nextInvoiceNumberData, refetch: refetchNextInvoiceNumber } = useQuery(GET_NEXT_INVOICE_NUMBER, {
    variables: { prefix: invoicePrefix },
    skip: !!invoice?.number // Ne pas ex√©cuter si on modifie une facture existante
  });

  // Mutations GraphQL
  const [createInvoice] = useMutation(CREATE_INVOICE_MUTATION, {
    onCompleted: () => {
      if (showNotifications) {
        Notification.success('Facture cr√©√©e avec succ√®s', {
          position: 'bottom-left'
        });
      }
      onClose();
    },
    refetchQueries: [
      { query: GET_INVOICES },
      'GetInvoices'
    ],
    onError: (error) => {
      if (showNotifications) {
        Notification.error('Erreur lors de la cr√©ation de la facture', {
          position: 'bottom-left'
        });
      }
      console.error('Error creating invoice:', error);
    },
  });

  const [updateInvoice] = useMutation(UPDATE_INVOICE_MUTATION, {
    onCompleted: () => {
      if (showNotifications) {
        Notification.success('Facture modifi√©e avec succ√®s', {
          position: 'bottom-left'
        });
      }
      refetchInvoices();
      onClose();
    },
    refetchQueries: [
      { query: GET_INVOICES },
      'GetInvoices'
    ],
    onError: (error) => {
      if (showNotifications) {
        Notification.error('Erreur lors de la modification de la facture', {
          position: 'bottom-left'
        });
      }
      console.error('Error updating invoice:', error);
    },
  });

  const [createClient] = useMutation(CREATE_CLIENT, {
    onError: (error) => {
      if (showNotifications) {
        Notification.error('Erreur lors de la cr√©ation du client', {
          position: 'bottom-left'
        });
      }
      console.error('Error creating client:', error);
    },
  });

  // Effets
  useEffect(() => {
    // V√©rifier si la facture a des coordonn√©es bancaires non vides
    if (invoice?.companyInfo?.bankDetails) {
      const { iban, bic, bankName } = invoice.companyInfo.bankDetails;
      const hasBankDetails = Boolean(iban || bic || bankName);
      setUseBankDetails(hasBankDetails);
    }
  }, [invoice]);

  // Initialiser le pr√©fixe de facture avec celui de la derni√®re facture cr√©√©e
  useEffect(() => {
    if (!invoice && invoicesData?.invoices?.invoices?.length > 0) {
      // Trier les factures par date de cr√©ation (la plus r√©cente en premier)
      const sortedInvoices = [...invoicesData.invoices.invoices].sort((a, b) => {
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      });
      
      // Utiliser le pr√©fixe de la facture la plus r√©cente
      if (sortedInvoices.length > 0 && sortedInvoices[0].prefix) {
        setInvoicePrefix(sortedInvoices[0].prefix);
      }
    }
  }, [invoice, invoicesData]);

  // Initialiser automatiquement le num√©ro de facture
  useEffect(() => {
    if (invoice?.number) {
      // Si on modifie une facture existante, utiliser son num√©ro
      setInvoiceNumber(invoice.number);
    } else if (nextInvoiceNumberData?.nextInvoiceNumber) {
      // Si on a r√©cup√©r√© le prochain num√©ro de facture via l'API, l'utiliser
      setInvoiceNumber(nextInvoiceNumberData.nextInvoiceNumber);
    } else if (invoicesData?.invoices?.invoices?.length > 0) {
      // Sinon, trouver le plus grand num√©ro de facture et l'incr√©menter
      try {
        const invoices = invoicesData.invoices.invoices;
        const samePrefix = invoices.filter((inv: { prefix: string; number: string }) => inv.prefix === invoicePrefix);
        
        if (samePrefix.length > 0) {
          // Trouver le plus grand num√©ro avec le m√™me pr√©fixe
          const maxNumber = Math.max(...samePrefix.map((inv: { prefix: string; number: string }) => 
            parseInt(inv.number, 10) || 0
          ));
          
          // Incr√©menter et formater avec des z√©ros
          const nextNumber = String(maxNumber + 1).padStart(6, '0');
          setInvoiceNumber(nextNumber);
        } else {
          // Si aucune facture avec ce pr√©fixe, commencer √† 1
          setInvoiceNumber('000001');
        }
      } catch (error) {
        console.error('Erreur lors du calcul du num√©ro de facture:', error);
        setInvoiceNumber('000001');
      }
    } else {
      // Par d√©faut, commencer √† 1
      setInvoiceNumber('000001');
    }
  }, [invoice, nextInvoiceNumberData, invoicesData, invoicePrefix]);

  useEffect(() => {
    // Mettre √† jour les coordonn√©es bancaires quand useBankDetails change ou quand userData est disponible
    if (useBankDetails && userData?.me?.company?.bankDetails) {
      const { iban, bic, bankName } = userData.me.company.bankDetails;
      setCompanyInfo(prev => ({
        ...prev,
        bankDetails: { iban, bic, bankName }
      }));
    }
  }, [useBankDetails, userData]);

  useEffect(() => {
    // V√©rifier si tous les champs bancaires sont remplis
    const allBankDetailsComplete = companyInfo.bankDetails && (
      companyInfo.bankDetails.iban &&
      companyInfo.bankDetails.bic &&
      companyInfo.bankDetails.bankName
    );
    setBankDetailsComplete(!!allBankDetailsComplete);
  }, [companyInfo.bankDetails]);

  useEffect(() => {
    // R√©ex√©cuter la requ√™te pour le prochain num√©ro de facture lorsque le pr√©fixe change
    if (!invoice?.number) {
      refetchNextInvoiceNumber({ prefix: invoicePrefix });
    }
  }, [invoicePrefix, refetchNextInvoiceNumber, invoice]);

  useEffect(() => {
    // Mettre √† jour purchaseOrderNumber lorsque la facture change
    if (invoice && invoice.purchaseOrderNumber) {
      setPurchaseOrderNumber(invoice.purchaseOrderNumber);
    }
  }, [invoice]);

  useEffect(() => {
    if (invoice && invoice.termsAndConditions) {
      setTermsAndConditions(invoice.termsAndConditions);
    }
    if (invoice && invoice.footerNotes) {
      setFooterNotes(invoice.footerNotes);
    }
  }, [invoice]);

  useEffect(() => {
    // Mettre √† jour les liens des conditions g√©n√©rales lorsque la facture change
    if (invoice && invoice.termsAndConditionsLinkTitle) {
      setTermsAndConditionsLinkTitle(invoice.termsAndConditionsLinkTitle);
    }
    if (invoice && invoice.termsAndConditionsLink) {
      setTermsAndConditionsLink(invoice.termsAndConditionsLink);
    }
  }, [invoice]);

  useEffect(() => {
    if (userData?.me?.company) {
      // Assurer que l'adresse est toujours d√©finie
      const company = userData.me.company;
      setCompanyInfo({
        ...company,
        address: company.address || {
          street: '',
          city: '',
          postalCode: '',
          country: ''
        }
      });
    }
  }, [userData?.me?.company]);

  // Handlers
  const handleAddItem = () => {
    setItems([...items, { description: '', quantity: 1, unitPrice: 0, vatRate: 20, unit: 'unit√©', discount: 0, discountType: 'FIXED' }]);
  };

  const handleRemoveItem = (index: number) => {
    setItems(items.filter((_, i) => i !== index));
  };

  const handleItemChange = (index: number, field: keyof Item, value: string | number) => {
    const newItems = [...items];
    newItems[index] = { ...newItems[index], [field]: value };
    setItems(newItems);
  };
  
  // Fonction pour mettre √† jour un item complet avec les donn√©es d'un produit
  const handleProductSelect = (index: number, product: {
    id: string;
    name: string;
    description?: string;
    unitPrice?: number;
    vatRate?: number;
    unit?: string;
  }) => {
    console.log('handleProductSelect appel√© avec le produit:', product.name);
    
    // Cr√©er une copie du tableau d'items
    const newItems = [...items];
    
    // Cr√©er un nouvel objet item en conservant les propri√©t√©s existantes
    // qui ne doivent pas √™tre modifi√©es
    newItems[index] = {
      ...newItems[index],
      description: product.name,
      details: product.description || '',
      unitPrice: product.unitPrice !== undefined && product.unitPrice !== null ? product.unitPrice : 0,
      vatRate: product.vatRate !== undefined && product.vatRate !== null ? product.vatRate : 20,
      unit: product.unit || 'unit√©',
      // Conserver la quantit√© existante ou initialiser √† 1
      quantity: newItems[index].quantity || 1
    };
    
    // Mettre √† jour le tableau d'items en une seule fois
    setItems(newItems);
    
    console.log('Item mis √† jour avec succ√®s via handleProductSelect');
  };

  const handleAddCustomField = () => {
    setCustomFields([...customFields, { key: '', value: '' }]);
  };

  const handleRemoveCustomField = (index: number) => {
    setCustomFields(customFields.filter((_, i) => i !== index));
  };

  const handleCustomFieldChange = (index: number, field: 'key' | 'value', value: string) => {
    const newCustomFields = [...customFields];
    newCustomFields[index][field] = value;
    setCustomFields(newCustomFields);
  };

  const calculateTotals = () => {
    let totalHT = 0;
    let totalVAT = 0;

    items.forEach(item => {
      let itemHT = item.quantity * item.unitPrice;
      
      // Appliquer la remise au niveau de l'item si elle existe
      if (item.discount) {
        if (item.discountType === 'PERCENTAGE') {
          itemHT = itemHT * (1 - (item.discount / 100));
        } else {
          itemHT = Math.max(0, itemHT - item.discount);
        }
      }
      
      const itemVAT = itemHT * (item.vatRate / 100);
      totalHT += itemHT;
      totalVAT += itemVAT;
    });

    const totalTTC = totalHT + totalVAT;

    let discountAmount = 0;
    if (discount) {
      if (discountType === 'PERCENTAGE') {
        discountAmount = (totalHT * discount) / 100;
      } else {
        discountAmount = discount;
      }
    }

    const finalTotalHT = totalHT - discountAmount;
    const finalTotalTTC = finalTotalHT + totalVAT;

    return {
      totalHT,
      totalVAT,
      totalTTC,
      finalTotalHT,
      finalTotalTTC,
      discountAmount
    };
  };

  const handleSubmit = async (e: React.FormEvent, asDraft?: boolean) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    // Utiliser asDraft s'il est fourni, sinon utiliser submitAsDraft (pour compatibilit√©)
    const isDraft = asDraft !== undefined ? asDraft : submitAsDraft;
    
    // Mettre √† jour submitAsDraft pour la coh√©rence
    if (isDraft !== submitAsDraft) {
      setSubmitAsDraft(isDraft);
    }
    
    // Forcer le statut √† DRAFT si isDraft est true, sinon √† PENDING
    if (isDraft) {
      console.log('For√ßage du statut √† DRAFT car isDraft est true (asDraft =', asDraft, ', submitAsDraft =', submitAsDraft, ')');
    } else {
      console.log('For√ßage du statut √† PENDING car isDraft est false (asDraft =', asDraft, ', submitAsDraft =', submitAsDraft, ')');
    }

    // Forcer un rafra√Æchissement du num√©ro de facture pour √©viter les doublons
    // Ne pas le faire pour les factures existantes
    if (!invoice) {
      try {
        const { data } = await refetchNextInvoiceNumber({ prefix: invoicePrefix });
        if (data?.nextInvoiceNumber) {
          console.log('Num√©ro de facture rafra√Æchi:', data.nextInvoiceNumber);
          setInvoiceNumber(data.nextInvoiceNumber);
        }
      } catch (error) {
        console.error('Erreur lors du rafra√Æchissement du num√©ro de facture:', error);
      }
    }

    try {
      if (!userData?.me?.company) {
        if (showNotifications) {
          Notification.error('Veuillez configurer vos informations d\'entreprise avant de cr√©er une facture', {
            position: 'bottom-left'
          });
        }
        setIsSubmitting(false);
        return;
      }
      // Calculer les totaux pour la facture (utilis√©s dans les logs et pour v√©rification)
      calculateTotals();
      
      // S'assurer que le client s√©lectionn√© est bien d√©fini, sinon utiliser celui de la facture existante
      const effectiveSelectedClient = selectedClient || (invoice?.client?.id || '');
      
      // V√©rifier que clients est un tableau avant d'utiliser find()
      const clients = clientsData?.clients || [];
      const selectedClientData = !isNewClient ? (Array.isArray(clients) ? clients.find((c: Client) => c.id === effectiveSelectedClient) : null) : null;
      
      // Fonction pour r√©cup√©rer les donn√©es compl√®tes du client
      const getClientData = () => {
        if (isNewClient) {
          // D√©terminer le type de client en fonction des champs remplis
          let clientType = newClient.type || 'COMPANY';
          // Si firstName et lastName sont remplis, c'est un particulier
          if (newClient.firstName && newClient.lastName) {
            clientType = 'INDIVIDUAL';
          }
          
          // Si c'est un nouveau client, on utilise les donn√©es saisies
          return {
            type: clientType,
            name: newClient.name,
            email: newClient.email || "client@example.com", // Email obligatoire
            address: {
              street: newClient.street || "Adresse non sp√©cifi√©e",
              city: newClient.city || "Ville non sp√©cifi√©e",
              postalCode: newClient.postalCode || "00000",
              country: newClient.country || "France",
            },
            // Champs sp√©cifiques aux entreprises
            siret: clientType === 'COMPANY' ? (newClient.siret || "12345678901234") : "",
            vatNumber: clientType === 'COMPANY' ? (newClient.vatNumber || "FR12345678901") : "",
            // Champs sp√©cifiques aux particuliers
            firstName: newClient.firstName || "",
            lastName: newClient.lastName || ""
          };
        } else {
          // Si on modifie une facture existante et que le client est d√©j√† dans la facture
          if (invoice && invoice.client) {
            return {
              id: invoice.client.id,
              type: invoice.client.type || 'COMPANY',
              name: invoice.client.name,
              email: invoice.client.email || "client@example.com",
              address: {
                street: invoice.client.address?.street || "Adresse non sp√©cifi√©e",
                city: invoice.client.address?.city || "Ville non sp√©cifi√©e",
                postalCode: invoice.client.address?.postalCode || "00000",
                country: invoice.client.address?.country || "France",
              },
              siret: invoice.client.type === 'COMPANY' ? (invoice.client.siret || "12345678901234") : "",
              vatNumber: invoice.client.type === 'COMPANY' ? (invoice.client.vatNumber || "FR12345678901") : "",
              firstName: invoice.client.firstName || "",
              lastName: invoice.client.lastName || ""
            };
          }
          
          // V√©rifier que selectedClientData existe
          if (!selectedClientData) {
            console.error("Aucun client s√©lectionn√© trouv√© et aucun client par d√©faut disponible");
            
            // V√©rifier si nous avons des donn√©es utilisateur pour pr√©-remplir les champs
            const userCompany = userData?.me?.company || {};
            
            // Si nous avons des donn√©es de l'utilisateur avec firstName et lastName, cr√©er un client de type INDIVIDUAL
            // sinon cr√©er un client de type COMPANY avec les donn√©es de l'entreprise
            const isIndividual = userData?.me?.firstName && userData?.me?.lastName;
            
            if (isIndividual) {
              // Cr√©er un client de type particulier avec les donn√©es de l'utilisateur
              return {
                id: "", // ID vide, sera g√©r√© c√¥t√© serveur
                type: 'INDIVIDUAL',
                name: `${userData.me.firstName} ${userData.me.lastName}`,
                email: userData.me.email || "client@example.com", // Email obligatoire
                address: {
                  street: userCompany.address?.street || "Adresse non sp√©cifi√©e",
                  city: userCompany.address?.city || "Ville non sp√©cifi√©e",
                  postalCode: userCompany.address?.postalCode || "00000",
                  country: userCompany.address?.country || "France",
                },
                siret: "", // Pas obligatoire pour un particulier
                vatNumber: "", // Pas obligatoire pour un particulier
                firstName: userData.me.firstName || "Pr√©nom",
                lastName: userData.me.lastName || "Nom"
              };
            } else {
              // Cr√©er un client de type entreprise avec les donn√©es de l'entreprise de l'utilisateur
              return {
                id: "", // ID vide, sera g√©r√© c√¥t√© serveur
                type: 'COMPANY',
                name: userCompany.name || "Entreprise par d√©faut",
                email: userCompany.email || "entreprise@example.com", // Email obligatoire
                address: {
                  street: userCompany.address?.street || "Adresse non sp√©cifi√©e",
                  city: userCompany.address?.city || "Ville non sp√©cifi√©e",
                  postalCode: userCompany.address?.postalCode || "00000",
                  country: userCompany.address?.country || "France",
                },
                siret: userCompany.siret || "12345678901234", // SIRET obligatoire pour une entreprise
                vatNumber: userCompany.vatNumber || "FR12345678901", // TVA obligatoire pour une entreprise
                firstName: "",
                lastName: ""
              };
            }
          }
          
          // D√©terminer le type de client en fonction des champs remplis ou utiliser le type existant
          let clientType = selectedClientData.type || 'COMPANY';
          // Si firstName et lastName sont remplis et qu'il n'y a pas de type d√©fini, c'est un particulier
          if (!selectedClientData.type && selectedClientData.firstName && selectedClientData.lastName) {
            clientType = 'INDIVIDUAL';
          }
          
          // Si le type est COMPANY, v√©rifier que nous avons les champs obligatoires
          const needsSiretAndVat = clientType === 'COMPANY';
          const siret = selectedClientData.siret || (needsSiretAndVat ? "12345678901234" : "");
          const vatNumber = selectedClientData.vatNumber || (needsSiretAndVat ? "FR12345678901" : "");
          
          return {
            id: selectedClientData.id,
            type: clientType,
            name: selectedClientData.name,
            email: selectedClientData.email || "client@example.com", // Email obligatoire
            address: {
              street: selectedClientData.address?.street || "Adresse non sp√©cifi√©e",
              city: selectedClientData.address?.city || "Ville non sp√©cifi√©e",
              postalCode: selectedClientData.address?.postalCode || "00000",
              country: selectedClientData.address?.country || "France",
            },
            siret: siret,
            vatNumber: vatNumber,
            firstName: selectedClientData.firstName || "",
            lastName: selectedClientData.lastName || ""
          };
        }
      };
      
      // R√©cup√©rer les donn√©es compl√®tes du client
      const clientData = getClientData();

      let clientId = clientData.id || effectiveSelectedClient;

      // If it's a new client, create it first
      if (isNewClient) {
        try {
          const { data: newClientData } = await createClient({
            variables: {
              input: {
                name: newClient.name,
                email: newClient.email,
                type: newClient.type, // Ajout du type de client
                firstName: newClient.firstName, // Ajout du pr√©nom pour les particuliers
                lastName: newClient.lastName, // Ajout du nom pour les particuliers
                address: {
                  street: newClient.street,
                  city: newClient.city,
                  postalCode: newClient.postalCode,
                  country: newClient.country
                },
                siret: newClient.siret,
                vatNumber: newClient.vatNumber
              }
            }
          });
          clientId = newClientData.createClient.id;
          if (showNotifications) {
            Notification.success('Client cr√©√© avec succ√®s', {
              position: 'bottom-left'
            });
          }
        } catch (error) {
          if (showNotifications) {
            Notification.error('Erreur lors de la cr√©ation du client', {
              position: 'bottom-left'
            });
          }
          console.error('Error:', error);
          setIsSubmitting(false);
          return;
        }
      }

      // Utiliser les valeurs actuelles des champs bancaires
      // Si la case est coch√©e et qu'au moins un champ est rempli, envoyer les coordonn√©es bancaires
      const bankDetails = useBankDetails ? {
        iban: companyInfo.bankDetails?.iban,
        bic: companyInfo.bankDetails?.bic,
        bankName: companyInfo.bankDetails?.bankName
      } : {iban: "", bic: "", bankName: ""};

      // Nettoyer les champs personnalis√©s en ne gardant que key et value
      const cleanCustomFields = customFields
        .filter(field => field.key && field.value)
        .map(({ key, value }) => ({ key, value }));

      const invoiceData = {
        client: {
          id: isNewClient ? clientId : (clientData.id || effectiveSelectedClient),
          type: clientData.type,
          name: clientData.name,
          email: clientData.email,
          address: {
            street: clientData.address.street,
            city: clientData.address.city,
            postalCode: clientData.address.postalCode,
            country: clientData.address.country
          },
          // Champs sp√©cifiques aux entreprises
          siret: clientData.siret,
          vatNumber: clientData.vatNumber,
          // Champs sp√©cifiques aux particuliers
          firstName: clientData.firstName,
          lastName: clientData.lastName
        },
        items: items.map(({ id, ...item }) => ({
          description: item.description,
          quantity: parseFloat(item.quantity.toString()),
          unitPrice: parseFloat(item.unitPrice.toString()),
          vatRate: parseFloat(item.vatRate.toString()),
          unit: item.unit || 'unit√©',
          discount: item.discount || 0,
          discountType: item.discountType || 'FIXED',
          details: item.details || ''
        })),
        // Forcer explicitement le statut en fonction de isDraft
        status: isDraft ? 'DRAFT' : 'PENDING',
        headerNotes,
        footerNotes,
        termsAndConditions,
        termsAndConditionsLinkTitle,
        termsAndConditionsLink,
        discount,
        discountType,
        companyInfo: {
          name: companyInfo.name,
          email: companyInfo.email,
          phone: companyInfo.phone,
          website: companyInfo.website,
          siret: companyInfo.siret,
          vatNumber: companyInfo.vatNumber,
          logo: companyInfo.logo,
          address: {
            street: companyInfo.address.street,
            city: companyInfo.address.city,
            postalCode: companyInfo.address.postalCode,
            country: companyInfo.address.country
          },
          bankDetails
        },
        customFields: cleanCustomFields,
        isDeposit,
        issueDate,
        executionDate: executionDate || null,
        dueDate,
        number: invoiceNumber,
        prefix: invoicePrefix,
        purchaseOrderNumber
      };

      if (!invoice) {
        // Creating new invoice
        try {
          // R√©cup√©rer une derni√®re fois le num√©ro de facture pour s'assurer qu'il est unique
          const freshInvoiceNumber = invoiceNumber;
          console.log('Cr√©ation de facture avec le num√©ro:', freshInvoiceNumber);
          
          // Mettre √† jour le num√©ro dans les donn√©es de la facture
          const finalInvoiceData = {
            ...invoiceData,
            number: freshInvoiceNumber
          };
          
          await createInvoice({
            variables: {
              input: finalInvoiceData
            }
          });
          if (onSubmit) onSubmit(finalInvoiceData);
        } catch (error) {
          if (showNotifications) {
            Notification.error('Erreur lors de la cr√©ation de la facture', {
              position: 'bottom-left'
            });
          }
          console.error('Error:', error);
        }
      } else {
        // Updating existing invoice
        try {
          await updateInvoice({
            variables: {
              id: invoice.id,
              input: invoiceData
            }
          });
          if (onSubmit) onSubmit(invoiceData);
        } catch (error) {
          if (showNotifications) {
            Notification.error('Erreur lors de la modification de la facture', {
              position: 'bottom-left'
            });
          }
          console.error('Error:', error);
        }
      }
    } catch (error) {
      if (showNotifications) {
        Notification.error('Erreur lors de la soumission de la facture', {
          position: 'bottom-left'
        });
      }
      console.error('Error:', error);
    } finally {
      setIsSubmitting(false);
      setSubmitAsDraft(false);
    }
  };

  // R√©cup√©rer l'URL de l'API √† partir des variables d'environnement ou utiliser une valeur par d√©faut
  const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:4000';

  return {
    // √âtats
    selectedClient,
    setSelectedClient,
    isNewClient,
    setIsNewClient,
    handleClientModeChange,
    newClient,
    setNewClient,
    items,
    setItems,
    status,
    setStatus,
    headerNotes,
    setHeaderNotes,
    footerNotes,
    setFooterNotes,
    termsAndConditions,
    setTermsAndConditions,
    termsAndConditionsLinkTitle,
    setTermsAndConditionsLinkTitle,
    termsAndConditionsLink,
    setTermsAndConditionsLink,
    discount,
    setDiscount,
    discountType,
    setDiscountType,
    customFields,
    setCustomFields,
    isDeposit,
    setIsDeposit,
    invoiceNumber,
    setInvoiceNumber,
    invoicePrefix,
    setInvoicePrefix,
    purchaseOrderNumber,
    setPurchaseOrderNumber,
    issueDate,
    setIssueDate,
    executionDate,
    setExecutionDate,
    dueDate,
    setDueDate,
    companyInfo,
    setCompanyInfo,
    useBankDetails,
    setUseBankDetails,
    bankDetailsComplete,
    bankDetailsReadOnly,
    setBankDetailsReadOnly,
    
    // Donn√©es
    clientsData,
    userData,
    invoicesData,
    nextInvoiceNumberData,
    
    // Fonctions utilitaires
    formatDate,
    calculateTotals,
    
    // Handlers
    handleAddItem,
    handleRemoveItem,
    handleItemChange,
    handleProductSelect, // Nouvelle fonction pour mettre √† jour un item complet
    handleAddCustomField,
    handleRemoveCustomField,
    handleCustomFieldChange,
    handleSubmit,
    
    // Constantes
    apiUrl,
    isSubmitting,
    setSubmitAsDraft
  };
};